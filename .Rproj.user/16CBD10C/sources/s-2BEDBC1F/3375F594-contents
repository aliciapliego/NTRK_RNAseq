---
title: "Differential expression analysis"
author: "Alicia Pliego"
date: "3/16/2022"
output: 
  html_document:
    toc: true
    toc_float: true
    toc_collapsed: true
    toc_depth: 3
    number_sections: true
    theme: sandstone
runtime: shiny
---

```{r setup, include=FALSE, echo=FALSE, message=FALSE}
library("DESeq2")
library(tximport)
library(plotly)
library(pheatmap)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler)
library(AnnotationHub)
library(ensembldb)
library(tidyverse)
  library(EnhancedVolcano)
library(ComplexHeatmap)
library(DT)
```


```{r,  echo=FALSE, warning=FALSE, message=FALSE}
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/NTRK/data/")
```

```{r,echo=FALSE, warning=FALSE, message=FALSE}
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/NTRK/data/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
```


```{r,  echo=FALSE, warning=FALSE, message=FALSE}
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/NTRK/data/NTRK_samples.txt', header = TRUE)

fig <- plot_ly(
  type = 'table',
  header = list(
    values = c("<b>Samples</b>", names(metadata)),
  align = c('left', rep('center', ncol(metadata))),
  line = list(width = 1, color = 'black'),
  fill = list(color = 'rgb(235, 100, 230)'),
  font = list(family = "Arial", size = 14, color = "white")
  ),
  cells = list(
    values = rbind(
      rownames(metadata), 
      t(as.matrix(unname(metadata)))
    ),
    align = c('left', rep('center', ncol(metadata))),
    line = list(color = "black", width = 1),
    fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
    font = list(family = "Arial", size = 12, color = c("black"))
  ))

fig
```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
dds <- DESeqDataSetFromTximport(txi, 
                                colData = metadata,
                                design <- ~Annotation)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
#do filtering steps as for the clustering analysis
is_expressed <- assay(dds) >= 10
keep <- rowSums(assay(dds) >= 10) >= 2
dds <- dds[keep,]
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
dds <- DESeq(dds)
res <- results(dds, contrast = c("Annotation", "Naive", "Resistant"))
```

## Comparison treated vs untreated groups 
Summary of differentially expressed genes:
```{r, echo=FALSE, warning=FALSE, message=FALSE}
resOrdered <- res[order(res$pvalue),]
summary(res)
```

Summary of differentially expressed genes.
Adjusting cut-off for and FDR of 0.05:
```{r, echo=FALSE, warning=FALSE, message=FALSE}
res05 <- results(dds, alpha=0.05,contrast = c("Annotation", "Naive", "Resistant"))
summary(res05)
```

Cutoff values:
  pvalue  = 10e-16
  FCcutoff = 1.5

### Volcano plot 
Genes upregulated in the resistant samples are in the right of the volcano plot, whilst downregulated genes are in the left hand side.
```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width= 8, fig.height = 9, fig.align='center'}
EnhancedVolcano(res05,
    lab = rownames(res05),
    title = 'Naive vs Resistant',
    pCutoff = 10e-16,
    FCcutoff = 1.5,
    x = 'log2FoldChange',
    y = 'pvalue')

```

### Interactive volcano plot
```{r, echo=FALSE, warning=FALSE, message=FALSE}
res05_df <- as.data.frame(res05)
res05_df$log10P <- -log10(res05_df$pvalue) 
```



```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width= 8, fig.height = 9, fig.align='center'}
library(plotly)

vline <- function(x = 0, color = "red") {
  list(
    type = "line", 
    y0 = 0, 
    y1 = 1, 
    yref = "paper",
    x0 = x, 
    x1 = x, 
    line = list(color = color)
  )
}
hline <- function(y = 0, color = "blue") {
  list(
    type = "line", 
    x0 = 0, 
    x1 = 1, 
    xref = "paper",
    y0 = y, 
    y1 = y, 
    line = list(color = color)
  )
}


fig <- plot_ly(data = res05_df, x = ~res05_df$log2FoldChange, y = ~res05_df$log10P,
               text= rownames(res05_df), color = ~res05_df$log2FoldChange) %>%
  layout(xaxis = list(title = 'log2FoldChange'), font=t, plot_bgcolor = "#e5ecf6",
         yaxis = list(title = '-log10(Pval)'), legend = list(title=list(text='Legend Title')), shapes = list(vline(2.5), hline(20)))

fig 
```



### Counts of other Differenatially expressed genes
```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width= 8, fig.height = 5, fig.align='center'}
# Save plotcounts to a data frame object

par(mfrow=c(2,3))

plotCounts(dds, gene="SPINT2", intgroup="Annotation")
plotCounts(dds, gene="GFOD1", intgroup="Annotation")
plotCounts(dds, gene="PAM", intgroup="Annotation")
plotCounts(dds, gene="SGSH", intgroup="Annotation")
plotCounts(dds, gene="KAZN", intgroup="Annotation")
plotCounts(dds, gene="ITGA6", intgroup="Annotation")
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Further filter DE genes based on Padj = 0.01,  and FC>1.5(L2FC = 0.58)
res_filtered_pval <- subset(res05, padj <0.01)
res_filtered_all_up <- subset(res_filtered_pval, log2FoldChange >0.58)
res_filtered_all_up_df <- as.data.frame(res_filtered_all_up)

res_filtered_all_down <- subset(res_filtered_pval, log2FoldChange < -0.58)
res_filtered_all_down_df <- as.data.frame(res_filtered_all_down)
```

### Table of downregulated genes in Treated samples

```{r, echo=FALSE}
library(shiny)
library(DT)
```

```{r, echo=FALSE}
DT::datatable(res_filtered_all_down_df)
```

### Table of upregulated genes in Treated samples
```{r, echo=FALSE}
DT::datatable(res_filtered_all_up_df)
```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Rank genes and export for GSEA analysis
x <- res_filtered_pval
x$fcsign <- sign(x$log2FoldChange )
x$logP=-log10(x$pvalue)
x$metric= x$logP/x$fcsign
x$Gene <- rownames(x)
y<-x[,c("Gene", "metric")]
filtered <- na.omit(y)
filtered <- filtered[!is.infinite(filtered$metric),]
filtered <- filtered[order(filtered$metric),]  
write.table(filtered ,file="DE_genes.rnk",quote=F,sep="\t",row.names=F)
```

## Heatmap of top 50 DE genes

```{r, echo=FALSE, warning=FALSE, message=FALSE}
#Select TOP 20 DE genes by pvalue
res_df<- as.data.frame(res_filtered_pval)
resOrdered   <- res_df[order(res_df$pvalue),]
resOrdered50 <- resOrdered[1:50,]
top50genes   <- rownames(resOrdered50)
top50genes   <- as.data.frame(top50genes)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
#Normalize results
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized=T) %>% 
                     data.frame() %>%
                     rownames_to_column(var="gene") 
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

## This will bring in a column of gene symbols
top50_counts<- merge(normalized_counts, top50genes, by.x="gene", by.y="top50genes")
names(top50_counts)[2] <- "LR2022_14"
names(top50_counts)[3] <- "LR2022_15"
names(top50_counts)[4] <- "LR2022_16"
names(top50_counts)[5] <- "LR2022_17"
names(top50_counts)[6] <- "LR2022_18"
names(top50_counts)[7] <- "LR2022_19"
names(top50_counts)[8] <- "LR2022_20"
names(top50_counts)[9] <- "LR2022_21"
names(top50_counts)[10] <- "LR2022_22"
names(top50_counts)[11] <- "LR2022_23"
names(top50_counts)[12] <- "LR2022_24"
top50_counts2 <- top50_counts[,-1]
rownames(top50_counts2) <- top50_counts[,1]
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

vst <- vst(dds, blind=FALSE)
vst <- assay(vst)
vst <- as.data.frame(vst)
vst_sig <- vst[rownames(vst) %in% rownames(top50_counts2),]
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
names(vst_sig)[1] <- "LR2022_14"
names(vst_sig)[2] <- "LR2022_15"
names(vst_sig)[3] <- "LR2022_16"
names(vst_sig)[4] <- "LR2022_17"
names(vst_sig)[5] <- "LR2022_18"
names(vst_sig)[6] <- "LR2022_19"
names(vst_sig)[7] <- "LR2022_20"
names(vst_sig)[8] <- "LR2022_21"
names(vst_sig)[9] <- "LR2022_22"
names(vst_sig)[10] <- "LR2022_23"
names(vst_sig)[11] <- "LR2022_24"
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

heat <- t(scale(t(vst_sig)))
```


```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width= 10, fig.height = 14, fig.align='center'}
Heatmap(heat, 
      row_names_gp = gpar(fontsize = 8),
    top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4),
        labels = c("Treated", "Untreated"), 
        labels_gp = gpar(col = "white", fontsize = 10))),
    column_km = 2)
```

```{r , echo=FALSE, warning=FALSE, message=FALSE, fig.width= 7, fig.height = 7, fig.align='center'}

library(heatmaply)
heatmaply(heat, 
          
  scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
    low = "blue", 
    high = "red", 
    midpoint = 0.5, 
    limits = c(0, 1)
  ),
  Colv = FALSE,
  Rowv =TRUE,
  showticklabels = c(TRUE, TRUE),
  scale = "row",
  main = "Differentially expressed genes"
  )
```

## GSEA results

### GSEA HALLMARKS

Link to enrichment results:

Read more [here](GSEA_NTRK_hallmarks/index.html) 

### GSEA Oncogenic HALLMARKS

Link to enrichment results:

Read more [here](GSEA_NTRK_onco/index.html) 

### GSEA GO Biological Process TERMS

Link to enrichment results:

Read more [here](GSEA_NTRK_go_bp/index.html) 




