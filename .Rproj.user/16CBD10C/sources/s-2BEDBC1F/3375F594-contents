---
title: "Differential expression analysis"
author: "Alicia Pliego"
date: "3/16/2022"
output: 
  html_document:
    toc: true
    toc_float: true
    toc_collapsed: true
    toc_depth: 3
    number_sections: true
    theme: sandstone
runtime: shiny
---

# Differential expression NTRK

```{r setup, include=FALSE, echo=FALSE, message=FALSE}
library("DESeq2")
library(tximport)
library(plotly)
library(fdrtool)
library(pheatmap)
library(Glimma)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler)
library(AnnotationHub)
library(ensembldb)
library(tidyverse)
library(EnhancedVolcano)
library(clusterProfiler)
library(ComplexHeatmap)
library(DT)
```


```{r,  echo=FALSE, warning=FALSE, message=FALSE}
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/NTRK/data/")
```

```{r,echo=FALSE, warning=FALSE, message=FALSE}
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/NTRK/data/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
```


```{r,  echo=FALSE, warning=FALSE, message=FALSE}
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/NTRK/data/NTRK_samples.txt', header = TRUE)

fig <- plot_ly(
  type = 'table',
  header = list(
    values = c("<b>Samples</b>", names(metadata)),
  align = c('left', rep('center', ncol(metadata))),
  line = list(width = 1, color = 'black'),
  fill = list(color = 'rgb(235, 100, 230)'),
  font = list(family = "Arial", size = 14, color = "white")
  ),
  cells = list(
    values = rbind(
      rownames(metadata), 
      t(as.matrix(unname(metadata)))
    ),
    align = c('left', rep('center', ncol(metadata))),
    line = list(color = "black", width = 1),
    fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
    font = list(family = "Arial", size = 12, color = c("black"))
  ))

fig
```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
dds <- DESeqDataSetFromTximport(txi, 
                                colData = metadata,
                                design <- ~Annotation)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
#do filtering steps as for the clustering analysis
is_expressed <- assay(dds) >= 10
keep <- rowSums(assay(dds) >= 10) >= 2
dds <- dds[keep,]
```
Increased pval for filtering to p-value =  0.001
```{r, echo=FALSE, warning=FALSE, message=FALSE}
dds <- DESeq(dds)
res <- results(dds,alpha=0.001, contrast = c("Annotation", "aResistant", "bNaive"))
```

# Inspection and correction of p values 
The null–p–values follow a uniform distribution on the unit interval [0,1] if they are computed using a continuous null
distribution. Significant p–values thus become visible as an enrichment of p–values near zero in the histogram.
Thus, p–value histogram of “correctly” computed p–values will have a rectangular shape with a peak at 0.

```{r, echo=FALSE, warning=FALSE, message=FALSE}
hist(res$pvalue, col = "lavender",
main = "Resistant vs Naive", xlab = "p-values")
```


Very often, if the assumed variance of the null distribution is too high, we see hill–shaped p–value histogram. If the variance is too low, we get a U–shaped histogram, with peaks at both ends.
Here we have a hill–shape, indicating an overestimation of the variance in the null distribution. Thus, the N(0, 1) null distribution of the Wald test is not appropriate here.
The dispersion estimation is not condition specific and estimates only a single dispersion estimate per gene. This is sensible, since the number of replicates is usually low.
However, if we have e.g. batches or “outlying” samples that are consistently a bit different from others within a group, the dispersion within the experimental group can be different and a single dispersion parameter not be appropriate.
For an example of the estimation of multiple dispersions, see the analysis performed in: Reyes et. al. ???- Drift and conservation of differential exon usage across tissues in primate species, 2013
Fortunately, there is software available to estimate the variance of the null–model from the test statistics. This is commonly referred to as “empirical null modelling”.

https://www.huber.embl.de/users/klaus/Teaching/DESeq2-Analysis.pdf
```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.align='center'}
### remove filtered out genes by independent filtering,
### they have NA adj. pvals
res2 <- res[ !is.na(res$padj), ]
### remove genes with NA pvals (outliers)
res2 <- res2[ !is.na(res2$pvalue), ]
### remove adjsuted pvalues, since we add the fdrtool results later on
### (based on the correct p-values)
res2 <- res2[, -which(names(res2) == "padj")]
### use z-scores as input to FDRtool to re-estimate the p-value
fdr.res2 <- fdrtool(res2$stat, statistic= "normal", plot = T)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
fdr.res2$param[1, "sd"]
### add values to the results data frame, also ad new BH- adjusted p-values
res2[,"padj"] <- p.adjust(fdr.res2$pval)

hist(fdr.res2$pval, col = "royalblue4",
main = "Resistant versus Naive, correct null model", xlab = "CORRECTED p-values")
```

# Extracting differentially expressed genes 

```{r, echo=FALSE, warning=FALSE, message=FALSE}
table(res2[,"padj"] < 0.1)
```

Summary of differential expressed genes:
```{r, echo=FALSE, warning=FALSE, message=FALSE}
resOrdered <- res2[order(res2$pvalue),]
summary(res)
```

Cutoff values:
  pvalue  = 10e-64
  FCcutoff = 3.5

## Volcano plot 
Genes upregulated in the resistant samples are in the right of the volcano plot, whilst downregulated genes are in the left hand side.

```{r,echo=FALSE, warning=FALSE, message=FALSE, fig.width= 8, fig.height = 9, fig.align='center'}
EnhancedVolcano(res2,
    lab = rownames(res2),
    title = 'Naive vs Resistant',
    pCutoff = 10e-64,
    FCcutoff = 3.5,
    x = 'log2FoldChange',
    y = 'pvalue')

```

## Interactive volcano plot
```{r, echo=FALSE, warning=FALSE, message=FALSE}
res05_df <- as.data.frame(res2)
res05_df$log10P <- -log10(res05_df$pvalue) 
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
res05_df_2 <- res05_df[, c("log2FoldChange", "pvalue", "lfcSE", "stat", "padj", "log10P")]
res05_df_2$Gene <- rownames(res05_df)
res05_df_2$log2_FoldChange <- res05_df_2$log2FoldChange

#write.csv(res05_df_2 ,file="volcano_table.csv",quote=F,row.names=F)

```


```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width= 8, fig.height = 9, fig.align='center'}
library(plotly)

vline <- function(x = 0, color = "red") {
  list(
    type = "line", 
    y0 = 0, 
    y1 = 1, 
    yref = "paper",
    x0 = x, 
    x1 = x, 
    line = list(color = color)
  )
}
hline <- function(y = 0, color = "blue") {
  list(
    type = "line", 
    x0 = 0, 
    x1 = 1, 
    xref = "paper",
    y0 = y, 
    y1 = y, 
    line = list(color = color)
  )
}


fig <- plot_ly(data = res05_df, x = ~res05_df$log2FoldChange, y = ~res05_df$log10P,
               text= rownames(res05_df), color = ~res05_df$log2FoldChange) %>%
  layout(xaxis = list(title = 'log2FoldChange'), font=t, plot_bgcolor = "#e5ecf6",
         yaxis = list(title = '-log10(Pval)'), legend = list(title=list(text='Legend Title')), shapes = list(vline(3.5), hline(60)))

fig 
```



### Counts of other Differentially expressed genes
```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width= 8, fig.height = 5, fig.align='center'}
# Save plotcounts to a data frame object

par(mfrow=c(2,3))

plotCounts(dds, gene="SPINT2", intgroup="Annotation")
plotCounts(dds, gene="GFOD1", intgroup="Annotation")
plotCounts(dds, gene="PAM", intgroup="Annotation")
plotCounts(dds, gene="SGSH", intgroup="Annotation")
plotCounts(dds, gene="KAZN", intgroup="Annotation")
plotCounts(dds, gene="ITGA6", intgroup="Annotation")
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Further filter DE genes based on Padj = 0.01,  and FC>1.5(L2FC = 0.58)
res_filtered_pval <- subset(res2, padj <0.01)
res_filtered_all_up <- subset(res_filtered_pval, log2FoldChange >0.58)
res_filtered_all_up_df <- as.data.frame(res_filtered_all_up)

res_filtered_all_down <- subset(res_filtered_pval, log2FoldChange < -0.58)
res_filtered_all_down_df <- as.data.frame(res_filtered_all_down)
```

### Table of downregulated genes in Treated samples

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(shiny)
library(DT)
```

```{r, echo=FALSE}
DT::datatable(res_filtered_all_down_df)
```

### Table of upregulated genes in Treated samples
```{r, echo=FALSE}
DT::datatable(res_filtered_all_up_df)
```


```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Rank genes and export for GSEA analysis
x <- res_filtered_pval
x$fcsign <- sign(x$log2FoldChange )
x$logP=-log10(x$pvalue)
x$metric= x$logP/x$fcsign
x$Gene <- rownames(x)
y<-x[,c("Gene", "metric")]
filtered <- na.omit(y)
filtered <- filtered[!is.infinite(filtered$metric),]
filtered <- filtered[order(filtered$metric),]  
#write.table(filtered ,file="DE_genes.rnk",quote=F,sep="\t",row.names=F)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
rowsum.threshold <- 2.5 # user chosen
fdr.threshold <- 0.01 # user chosen
rs <- rowSums(counts(dds))
dds <- dds[ rs > rowsum.threshold ,]
dds <- DESeq(dds)
res <- results(dds, alpha=0.01, contrast = c("Annotation", "aResistant", "bNaive"), independentFiltering=FALSE) # use count threshold instead of IF
assayed.genes <- rownames(res)
de.genes <- rownames(res)[ which(res$padj < fdr.threshold) ]
```

## Heatmap of top 50 DE genes

```{r, echo=FALSE, warning=FALSE, message=FALSE}
#Select TOP 20 DE genes by pvalue
res_df<- as.data.frame(res_filtered_pval)
resOrdered   <- res_df[order(res_df$pvalue),]
resOrdered50 <- resOrdered[1:50,]
top50genes   <- rownames(resOrdered50)
top50genes   <- as.data.frame(top50genes)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
#Normalize results
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized=T) %>% 
                     data.frame() %>%
                     rownames_to_column(var="gene") 
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

## This will bring in a column of gene symbols
top50_counts<- merge(normalized_counts, top50genes, by.x="gene", by.y="top50genes")
names(top50_counts)[2] <- "LR2022_14"
names(top50_counts)[3] <- "LR2022_15"
names(top50_counts)[4] <- "LR2022_16"
names(top50_counts)[5] <- "LR2022_17"
names(top50_counts)[6] <- "LR2022_18"
names(top50_counts)[7] <- "LR2022_19"
names(top50_counts)[8] <- "LR2022_20"
names(top50_counts)[9] <- "LR2022_21"
names(top50_counts)[10] <- "LR2022_22"
names(top50_counts)[11] <- "LR2022_23"
names(top50_counts)[12] <- "LR2022_24"
top50_counts2 <- top50_counts[,-1]
rownames(top50_counts2) <- top50_counts[,1]
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

vst <- vst(dds, blind=FALSE)
vst <- assay(vst)
vst <- as.data.frame(vst)
vst_sig <- vst[rownames(vst) %in% rownames(top50_counts2),]
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
names(vst_sig)[1] <- "LR2022_14"
names(vst_sig)[2] <- "LR2022_15"
names(vst_sig)[3] <- "LR2022_16"
names(vst_sig)[4] <- "LR2022_17"
names(vst_sig)[5] <- "LR2022_18"
names(vst_sig)[6] <- "LR2022_19"
names(vst_sig)[7] <- "LR2022_20"
names(vst_sig)[8] <- "LR2022_21"
names(vst_sig)[9] <- "LR2022_22"
names(vst_sig)[10] <- "LR2022_23"
names(vst_sig)[11] <- "LR2022_24"
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

heat <- t(scale(t(vst_sig)))
```


```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.width= 10, fig.height = 14, fig.align='center'}
Heatmap(heat, 
      row_names_gp = gpar(fontsize = 8),
    top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4),
        labels = c("Resistant", "Naive"), 
        labels_gp = gpar(col = "white", fontsize = 10))),
    column_km = 2)
```

```{r , echo=FALSE, warning=FALSE, message=FALSE, fig.width= 7, fig.height = 7, fig.align='center'}

library(heatmaply)
heatmaply(heat, 
          
  scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
    low = "blue", 
    high = "red", 
    midpoint = 0.5, 
    limits = c(0, 1)
  ),
  Colv = FALSE,
  Rowv =TRUE,
  showticklabels = c(TRUE, TRUE),
  scale = "row",
  main = "Differentially expressed genes"
  )
```

# GSEA results

## GSEA HALLMARKS

Link to enrichment results:

Read more [here](GSEA_NTRK_hallmarks/index.html) 

## GSEA Oncogenic HALLMARKS

Link to enrichment results:

Read more [here](GSEA_NTRK_onco/index.html) 

## GSEA GO Biological Process TERMS

Link to enrichment results:

Read more [here](GSEA_NTRK_go_bp/index.html) 



# Cluster Profiles

## GO Enrichment
```{r, echo=FALSE, warning=FALSE, message=FALSE}
# we want the log2 fold change 
original_gene_list = res2$log2FoldChange
#original_gene_list<- as.data.frame(original_gene_list)
# name the vector
names(original_gene_list) <- rownames(res2)

# omit any NA values 
gene_list<-na.omit(original_gene_list)

# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)

gse <- gseGO(geneList=gene_list, 
             ont ="BP", 
             keyType = "SYMBOL",
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Hs.eg.db, 
             pAdjustMethod = "none")
```

```{r , echo=FALSE, warning=FALSE, message=FALSE, fig.width= 10, fig.height = 10, fig.align='center'}

require(DOSE)
dotplot(gse, showCategory=3, split=".sign") + facet_grid(.~.sign)

```

```{r , echo=FALSE, warning=FALSE, message=FALSE, fig.width= 7, fig.height = 7, fig.align='center'}

# Use the `Gene Set` param for the index in the title, and as the value for geneSetId
#gseaplot(gse, by = "all", title = gse$Description[6], geneSetID = 1)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}

# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids = bitr(names(original_gene_list), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
```

#### GSEA with Cluster Profiler
```{r, echo=FALSE, warning=FALSE, message=FALSE}
# remove duplicate IDS (here we use "SYMBOL", but it should be whatever was selected as keyType)
dedup_ids = ids[!duplicated(ids[c("SYMBOL")]),]

# Create a new dataframe df2 which has the respective entrez IDs for the gene symbols.
colnames(dedup_ids) = c("GeneSymbol", "EntrezID")
res$GeneSymbol <- rownames(res)
res2 <- as.data.frame(res)
df2 = merge(res2, dedup_ids, by = "GeneSymbol")

# Create a vector of the gene universe
kegg_gene_list = df2$log2FoldChange

# Name vector with ENTREZ ids
names(kegg_gene_list) = df2$EntrezID

# omit any NA values 
kegg_gene_list = na.omit(kegg_gene_list)

# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)

kegg_organism = "hsa"
kk2 = gseKEGG(geneList     = kegg_gene_list,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")
```

```{r , echo=FALSE, warning=FALSE, message=FALSE, fig.width= 10, fig.height = 10, fig.align='center'}

dotplot(kk2, showCategory = 5, title = "Enriched Pathways" , split=".sign") + facet_grid(.~.sign)
```

```{r, echo=FALSE, warning=FALSE, message=FALSE}
out = as.data.frame(kk2@result)
#out = out[, 1:30]
#head(out)
```

Plot the results from the enrichment as a table
```{r, echo=FALSE}
DT::datatable(out)
```
Plot the ENTREZ ID to Genesymbol table
```{r, echo=FALSE}
DT::datatable(df2)
```

```{r , echo=FALSE, warning=FALSE, message=FALSE, fig.width= 7, fig.height = 7, fig.align='center'}

#gseaplot(kk2, by = "all", title = kk2$Description[52], geneSetID = 1)

```

```{r , echo=FALSE, warning=FALSE, message=FALSE, fig.width= 7, fig.height = 7, fig.align='center'}

#gseaplot(kk2, by = "all", title = kk2$Description[13], geneSetID = 1)

```

